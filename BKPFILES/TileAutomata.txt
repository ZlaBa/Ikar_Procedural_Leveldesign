using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Tilemaps;
using UnityEditor;

public class TileAutomata : MonoBehaviour
{

    //Chance, dass ein Feld "lebendig" wird
    [Range(0, 100)]
    public int iniChance;

    //Minimale Anzahl Nachbarn damit ein neues Feld generiert wird
    [Range(1, 8)]
    public int birthLimit;

    //Minimale Anzahl Nachbern die zum "Überleben" benötigt werden
    [Range(1, 8)]
    public int deathLimit;

    //Anzahl Runden die durchgerechnet werden
    [Range(1, 10)]
    public int numR;
    private int count = 0; //für gespeicherte Files

    private int[,] terrainMap; //Store Terrain Tiles, 0 für tot, 1 für lebendig
    public Vector3Int tmapSize; //Kartengrösse

    public Tilemap topMap;
    public Tilemap botMap;
    public IsometricRuleTile topTile;
    public Tile botTile;

    int width;
    int height;

    //Hauptfunktion
    public void doSim(int numR)
    {
        clearMap(false);
        width = tmapSize.x;
        height = tmapSize.y;

        if (terrainMap == null)
        {
            terrainMap = new int[width, height];
            initPos();
        }

        for (int i = 0; i < numR; i++)
        {
            terrainMap = genTilePos(terrainMap);
        }

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                if (terrainMap[x, y] == 1)
                {
                    topMap.SetTile(new Vector3Int(-x + width / 2, -y + height / 2, 0), topTile);
                }
                botMap.SetTile(new Vector3Int(-x + width / 2, -y + height / 2, 0), botTile);
            }
        }

    }

    public int[,] genTilePos(int[,] oldMap)
    {
        int[,] newMap = new int[width, height];
        int neighb;
        BoundsInt myB = new BoundsInt(-1, -1, 0, 3, 3, 1);

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                neighb = 0;
                foreach (var b in myB.allPositionsWithin)
                {
                    if (b.x == 0 && b.y == 0)
                        continue;
                    if (x + b.x >= 0 && x + b.x < width && y + b.y >= 0 && y + b.y < height)
                    {
                        neighb += oldMap[x + b.x, y + b.y];
                    }
                    else
                    {
                        neighb++;
                    }
                }

                if (oldMap[x, y] == 1)
                {
                    if (neighb < deathLimit)
                    {
                        newMap[x, y] = 0;
                    }
                    else
                    {
                        newMap[x, y] = 1;
                    }
                }

                if (oldMap[x, y] == 0)
                {
                    if (neighb > birthLimit)
                    {
                        newMap[x, y] = 1;
                    }
                    else
                    {
                        newMap[x, y] = 0;
                    }
                }

            }
        }
        return newMap;
    }


    public void initPos()
    {
        for (int x = 0; x < width; x++)
        {

            for (int y = 0; y < height; y++)
            {
                terrainMap[x, y] = Random.Range(1, 101) < iniChance ? 1 : 0;
            }
        }
    }

    // Update is called once per frame
    void Update()
    {   // Befehl zum Start
        if (Input.GetMouseButtonDown(0))
        {
            doSim(numR);
        }
        // Befehl zur Löschung
        if (Input.GetMouseButtonDown(1))
        {
            clearMap(true);
        }
        // Befehl zum Speichern
        if (Input.GetMouseButton(2))
        {
            SaveAssetMap();
        }
    }
    // Karte als Asset speichern
    public void SaveAssetMap()
    {
        string saveName = "tmapXY_" + count;
        var mf = GameObject.Find("Grid");

        if (mf)
        {
            var savePath = "assets/" + saveName + ".prefab";
            if (PrefabUtility.CreatePrefab(savePath,mf))
            {
                EditorUtility.DisplayDialog("Tilemap saved", "Your Tilemap was saved under " + savePath, "Continue");
            }
            else
            {
                EditorUtility.DisplayDialog("Tilemap NOT saved", "An Error occured while trying to save the Tilemap under " + savePath, "Continue");
            }
        }
    }

    public void clearMap(bool complete)
    {
        topMap.ClearAllTiles();
        botMap.ClearAllTiles();

        if (complete)
        {
            terrainMap = null;
        }
    }
}

